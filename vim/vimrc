" Modified: Mon 11 Aug 2014 09:55 AM

set nocompatible

" Vim-Plug Bundles {{{
let g:plug_threads = 6
let g:plug_timeout = 20
call plug#begin('~/.vim/plugged')
" Appearance Utilities {{{

"Code tag view and navigation with ctags tags
Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
"Filesystem explorer
Plug 'Shougo/vimfiler.vim', {'on': 'VimFiler'}

" }}}
" Git Related {{{

"Git management from withing vim
Plug 'tpope/vim-fugitive'
"Gitk for vim
Plug 'gregsexton/gitv', {'on': 'Gitv'}

" }}}
" Other {{{
"Snippet management

Plug 'SirVer/ultisnips', { 'on' : [] }
Plug 'honza/vim-snippets', { 'on' : [] }
"Super tab completion
Plug 'ervandew/supertab'
"Easy changing, adding and removing of surround objects
Plug 'tpope/vim-surround', { 'on' : [] }
"Closing of brackets, tags, quotes etc.
Plug 'Raimondi/delimitMate', { 'on' : [] }
"Syntax checking for a wide range of languages
Plug 'scrooloose/syntastic'
"Easy commenting/uncommenting of code.
Plug 'tpope/vim-commentary', { 'on' : [] }
"Simple alignment of lines
Plug 'tommcdo/vim-lion'
"Multiple useful keybindings
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
"Allow incrementing true/false values etc.
Plug 'nishigori/increment-activator'
Plug 'clever-f.vim'
Plug 'itchyny/calendar.vim', {'on': 'Calendar'}

"}}}
" Filetype specific {{{
"Override detection of .md files to markdown
Plug 'tpope/vim-markdown', {'for': 'markdown'}
"Outline files for notes and bits of info.
Plug 'vimoutliner/vimoutliner', {'for': ['otl', 'votl'] }
"Decrypt, edit and then re-encrypt gpg stored files.
Plug 'jamessan/vim-gnupg'

" }}}

augroup load_ultisnips
  autocmd!
  autocmd InsertEnter * call plug#load('vim-surround')
  autocmd InsertEnter * call plug#load('delimitMate')
  autocmd InsertEnter * call plug#load('vim-commentary')
  autocmd InsertEnter * call plug#load('ultisnips')
  			  \| doautocmd UltiSnipsFileType FileType
  autocmd InsertEnter * call plug#load('vim-snippets')
  			  \| autocmd! load_ultisnips
augroup END

call plug#end()

" }}} -------------------------------------------------------------------------
" Plugin Settings {{{

filetype off
let s:has_ag = executable('ag')
let s:has_ack = executable('ack')

"""" Calendar
let g:calendar_google_calendar = 1

"""" UltiSnips Plugin
set runtimepath^=~/.vim/custom
let g:UltiSnipsSnippetsDir        = "~/.vim/custom/mysnippets"
let g:UltiSnipsSnippetDirectories =["UltiSnips","mysnippets"]
let g:UltiSnipsEditSplit          = "vertical"

"""" Syntastic
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_tex_checkers = ['chktex']

"""" Molokai Theme
let g:molokai_original = 1

"""" Tagbar
let g:tagbar_sort = 0
let g:tagbar_type_tex = {
	\ 'ctagstype' : 'latex',
	\ 'kinds'     : [
		\ 's:sections',
		\ 'g:graphics',
		\ 'l:labels',
		\ 'r:refs',
		\ 'p:pagerefs'
	\ ],
	\ 'sort'    : 0,
\ }

""" Supertab
let g:SuperTabCrMapping = 0 "Needed to allow delimitMate_expand_cr
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-n>"

	" better key bindings for UltiSnipsExpandTrigger
	let g:UltiSnipsExpandTrigger = "<tab>"
	let g:UltiSnipsJumpForwardTrigger = "<tab>"
	let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"""" delimitMate
let delimitMate_jump_expansion = 0
let delimitMate_expand_cr = 2
let delimitMate_expand_space = 1

""" Clever F
let g:clever_f_smart_case = 1
let g:clever_f_mark_cursor = 1
let g:clever_f_mark_cursor_color = 'Error'

" }}}
" Functions {{{

" View the difference between the buffer and the file the last time it was saved
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis

function! MyFoldText() " {{{
	let line = getline(v:foldstart)

	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth - 3
	let foldedlinecount = v:foldend - v:foldstart

	" expand tabs into spaces
	let onetab = strpart('          ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')

	let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
	let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
	return line . repeat(" ",fillcharcount) . foldedlinecount . ' '
endfunction " }}}
" }}}
" Settings {{{

filetype plugin on
filetype indent on
syntax on
set ttyfast

" Code Formatting {{{
set autoindent " copy indent from current when starting new line
set copyindent
set encoding=utf-8
set ffs=unix,dos,mac
set formatoptions=tcroqln
silent! set formatoptions+=j
set noeol
set noexpandtab
set preserveindent
set shiftwidth=4
set smartindent
set smarttab
set softtabstop=0
set tabstop=4
set wrap
set textwidth=79
set foldtext=MyFoldText()

" }}}
" External Prgs {{{
set path+=../**
let s:git=system("git rev-parse --git-dir > /dev/null")
if !v:shell_error
	set grepprg=git\ --no-pager\ grep\ -H\ -n\ --no-color
elseif s:has_ack
	set grepprg=ack\ -H\ --nogroup\ --nocolor\ --smart-case
elseif s:has_ag
	set grepprg=ag\ --nogroup\ --nocolor\ --smart-case
else
	set grepprg=grep\ --dereference-recursive\ --ignore-case\ --line-number\ --with-filename\ $*
endif
set keywordprg=""
set makeprg=make
set shell=sh
set complete=.,w,u,t,i,k
"}}}
" Search {{{
set hlsearch
set ignorecase
set incsearch
set magic
set matchtime=8
set showmatch
set smartcase
"}}}
" History, Backup and Undo Files {{{
set history=700
set backup
set backupdir=/var/tmp,/tmp
set directory=/var/tmp,/tmp
set writebackup
if exists("&undofile")
	set undofile
	set undodir=~/.vim/undodir
	augroup undo
		autocmd!
		autocmd BufWritePre /tmp/* setlocal noundofile
	augroup END
endif
"}}}
" Editor Setup {{{
set autoread      " Auto read when a file changes from the outside
set autowrite     " Auto write before make etc.
set linebreak     " Don't break across words
set modeline      " Check for modelines to set files specific settings
set hidden        " Hide buffer when abandoning rather than unloading
set lazyredraw    " Don't redraw the screen for macros and registers
set nostartofline " Dont' move cursor to start of line for gg,G etc.
set matchpairs+=<:>
set listchars=tab:·\ ,trail:▸,nbsp:#,extends:❯,precedes:❮
"set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list
set fillchars=vert:│
set switchbuf=usetab " Method to use when switching buffers
set scrolloff=5      " Number of lines to keep above and below cursor
set synmaxcol=800   " Syntax highlight long lines
set virtualedit+=block
"}}}
" User Controls {{{
set whichwrap+=<,>,h,l         " Keys that wrap onto next line
set backspace=eol,start,indent " Allow backspacing over
"}}}
" UI {{{
colorscheme molokaiJ
" colorscheme base16-monokai
set background=dark

set wrapmargin=0 " Wrap text
set showtabline=1
set cursorline
set cmdheight=1
if exists("&relativenumber")
	set relativenumber
endif
set number
set noerrorbells
set novisualbell
set t_vb=
set tm=500
set mouse=a
if $USERNAME == 'jaw097'
	set guifont=DejaVu\ Sans\ Mono\ 10
else
	set guifont=Droid\ Sans\ Mono\ 10
endif
if exists("&colorcolumn")
	set colorcolumn=+1
else
	:mat ErrorMsg '\%81v.\+'
endif
set splitbelow
set splitright
"}}}
" Command Prompt and status line {{{
set showcmd          " Show last command in last line of scree
set ruler
set laststatus=2     " Show a statusline in all windows
set wildmode=full
set wildmenu
set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*.class        "Ignore VCS
if exists("&wildignorecase")
	set wildignorecase
endif

"}}}
" GUI {{{
if has("gui_running")
	" set guioptions+=P "allow visual selection to be accessed in system paste
	set guioptions+=c "use console dialogues
	set guioptions-=L "left hand toolbar isn't present
	set guioptions-=T "remove tool bar
	set guioptions-=l "remove right scroll
	set guioptions-=m "remove menu bar
	set guioptions-=r "remove left scroll
endif

" automatically open quickfix window after commands that modify the quickfix list
" autocmd QuickFixCmdPost *grep* if len(getqflist()) | copen | endif

" go to last cursor position when opening files
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
"}}}

" }}}
" FileTypes {{{

augroup ft
	autocmd!
	au FileType * exe('setl dict+='.$VIMRUNTIME.'/syntax/'.&filetype.'.vim')
	autocmd BufEnter,BufNew *.tex set ft=tex | source ~/.vim/ftplugin/tex.vim
	autocmd BufEnter,BufNew *.rout,*.Rout set ft=r
	autocmd BufNewFile,BufRead *.mail set filetype=mail
augroup END

augroup vimp
	autocmd!
	autocmd BufEnter *info.gpg set ft=gpg
	autocmd FileType gpg set conceallevel=2
	autocmd FileType gpg :syntax region hideup Conceal start='|' end='$'
	autocmd FileType gpg set colorcolumn=0
augroup END

" }}}
" Keybindings {{{

nnoremap ; :
nnoremap , ;

map <F1> <Nop>

" Try using jk and kj as Escape in insert mode.
inoremap jk <Esc>
inoremap kj <Esc>

" Make j and k move to the next row on screen rather
nmap j gj
nmap k gk

" Center search result
nnoremap n nzz
nnoremap N Nzz

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

nnoremap D dg_
nnoremap Y yg_

map <C-g> :grep<space>

" Jump to start and end of line in insert mode
inoremap <C-a> <esc>I
inoremap <C-e> <esc>A
cnoremap <c-a> <home>
cnoremap <c-e> <end>

nnoremap Q :normal n.<CR>

" Delete to black hole with X
noremap X "_d
noremap XX "_dd

" Re-indent whole file
nnoremap g+ :call Preserve("normal gg=G")<CR>

" Insert current filename
inoremap <leader>fn <C-R>=expand("%:t")<CR>

" List all buffers and quickly switch to selected
nmap <leader>b :ls<CR>:buffer<Space>

map <leader>rc :e! ~/.vim/vimrc<CR>
augroup Reload_vimrc
	autocmd!
	autocmd BufWritePost $MYVIMRC source $MYVIMRC | echo "vimrc is sourced"
	autocmd BufWritePost '$HOME/.vim/vimrc' source $MYVIMRC | echo "vimrc is sourced"
	autocmd BufWritePost '~/.vim/vimrc' source $MYVIMRC | echo "vimrc is sourced"
augroup END

" Replace selected text
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

" Split lines, oposite of join, J
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Fast saving
nmap <leader>w :w!<cr>
cabbrev w!! w !sudo tee > /dev/null %
augroup Save
	autocmd!
	au FocusLost * :silent! wall
	au VimResized * :wincmd =
augroup END

" Save the current file and run the make program
map <F9>   :make<Return>
map <S-F9> :silent make<Return>
map <F10>  :copen<Return>:cprevious<Return>
map <F11>  :copen<Return>:cnext<Return>

" Open the Tagbar sidebar
nnoremap <silent> <F8> :TagbarToggle<CR>

"Toggle NERDTree sidebar
nmap <F7>   :VimFiler -split -simple -winwidth=30 -toggle -no-quit<CR>
imap <F7>   :VimFiler -split -simple -winwidth=30 -toggle -no-quit<CR>
nmap <S-F7> :VimFiler -split -simple -winwidth=30 -toggle -no-quit -find<CR>
imap <S-F7> :VimFiler -split -simple -winwidth=30 -toggle -no-quit -find<CR>

" Unset highlighting of a search
nmap <silent> <leader>q :nohlsearch<CR><Plug>(clever-f-reset)

" Switch to Next and Previous buffer
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Ranger
nnoremap <leader>r :silent !ranger %:h<cr>:redraw!<cr>
nnoremap <leader>R :silent !ranger<cr>:redraw!<cr>

" System clipboard copy and paste
nmap <leader>v "+gh
imap <leader>v <ESC>"+gpa
nmap <leader>ay ggVG"+y

" Jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

"           Scroll Wheel = Up/Down 4 lines
"   Shift + Scroll Wheel = Up/Down 1 page
" Control + Scroll Wheel = Up/Down 1/2 page
noremap  <ScrollWheelUp>    6<C-Y>
noremap  <ScrollWheelDown>  6<C-E>
noremap  <S-ScrollWheelUp>   <C-Y>
noremap  <S-ScrollWheelDown> <C-E>
noremap  <C-ScrollWheelUp>   <C-U>
noremap  <C-ScrollWheelDown> <C-D>
inoremap <ScrollWheelUp>     <C-O>4<C-Y>
inoremap <ScrollWheelDown>   <C-O>4<C-E>
inoremap <S-ScrollWheelUp>   <C-O><C-Y>
inoremap <S-ScrollWheelDown> <C-O><C-E>
inoremap <C-ScrollWheelUp>   <C-O><C-U>
inoremap <C-ScrollWheelDown> <C-O><C-D>
map      <MiddleMouse>       <LeftMouse>
imap     <MiddleMouse>       <LeftMouse>
map      <2-MiddleMouse>     <LeftMouse>
imap     <2-MiddleMouse>     <LeftMouse>
map      <3-MiddleMouse>     <LeftMouse>
imap     <3-MiddleMouse>     <LeftMouse>
map      <4-MiddleMouse>     <LeftMouse>
imap     <4-MiddleMouse>     <LeftMouse>

" }}}

" vim: fdm=marker
