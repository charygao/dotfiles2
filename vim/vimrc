" Created:  Tue 12 Aug 2014
" Modified: Thu 08 Jan 2015
" Author:   Josh Wainwright
" Filename: vimrc

" Paths and Variables            {{{
if has('unix')
	let $VIMHOME=$HOME.'/.vim/'
elseif has('win32')
	let $VIMHOME=$HOME.'/vimfiles/'
	let $PATH=$PATH.';C:/cygwin/bin/'
endif
" }}}
" Vim-Plug Bundles               {{{
let g:plug_threads = 6
let g:plug_timeout = 20

if executable('git')
	call plug#begin($VIMHOME.'plugged')

	" Appearance Utilities       {{{

	"Code tag view and navigation with ctags tags
	if executable('ctags')
		Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
	endif
	Plug 'ap/vim-buftabline'

	" }}}
	" Git Related                {{{

	"Git management from withing vim
	Plug 'tpope/vim-fugitive'
	"Gitk for vim
	Plug 'gregsexton/gitv', {'on': 'Gitv'}

	" }}}
	" Other                      {{{

	if has('python')
		"Snippet management
		Plug 'SirVer/ultisnips', {'on' : [] }
		Plug 'honza/vim-snippets', {'on' : [] }
	endif
	Plug 'Shougo/unite.vim'
	if !has('win32unix')
		"Google calendar in vim
		Plug 'itchyny/calendar.vim', {'on' : 'Calendar'}
		"Syntax checking for a wide range of languages
		Plug 'scrooloose/syntastic', {'on' : [] }
	end
	"Super tab completion
	Plug 'ervandew/supertab'
	"Easy changing, adding and removing of surround objects
	Plug 'tpope/vim-surround', { 'on' : [] }
	"Closing of brackets, tags, quotes etc.
	Plug 'Raimondi/delimitMate', { 'on' : [] }
	"Easy commenting/uncommenting of code.
	Plug 'tpope/vim-commentary', { 'on' : [] }
	"Simple alignment of lines
	Plug 'tommcdo/vim-lion'
	"Multiple useful keybindings
	Plug 'tpope/vim-unimpaired'
	"Simple minimalist alternative to netrw
	Plug 'jeetsukumaran/vim-filebeagle'
	"Allow incrementing true/false values etc.
	Plug 'nishigori/increment-activator'
	"Make f (forward) and t (to) better
	Plug 'clever-f.vim'
	"Rename multiple files using vim
	Plug 'vim-scripts/renamer.vim', {'on' : 'Renamer' }
	Plug 'mhinz/vim-startify'
	Plug 'Wolfy87/vim-expand', {'on' : 'Expand' }

	"}}}
	" Filetype specific          {{{

	"Override detection of .md files to markdown
	Plug 'tpope/vim-markdown', {'for': 'markdown'}
	"Outline files for notes and bits of info.
	Plug 'vimoutliner/vimoutliner', {'for': ['otl', 'votl'] }
	"Decrypt, edit and then re-encrypt gpg stored files.
	Plug 'jamessan/vim-gnupg'

	Plug 'istib/vifm.vim'
	" }}}

	augroup load_plugs
		autocmd!
		autocmd InsertEnter * call plug#load('vim-surround')
		autocmd InsertEnter * call plug#load('delimitMate')
		autocmd InsertEnter * call plug#load('vim-commentary')
		autocmd InsertEnter * call plug#load('syntastic')
		autocmd InsertEnter * call plug#load('ultisnips')
			  		\| doautocmd UltiSnipsFileType FileType
		autocmd InsertEnter * call plug#load('vim-snippets')
			  		\| autocmd! load_plugs
	augroup END

	call plug#end()
endif " executable(git)

" }}} -------------------------------------------------------------------------
" Plugin Settings                {{{

filetype off
let s:has_ag = executable('ag')
let s:has_ack = executable('ack')

"""" Calendar
let g:calendar_google_calendar = 1

"""" UltiSnips Plugin
set runtimepath^=$HOME/.vim/custom
let g:UltiSnipsSnippetsDir        = "~/.vim/custom/mysnippets"
let g:UltiSnipsSnippetDirectories =["UltiSnips","mysnippets"]
let g:UltiSnipsEditSplit          = "vertical"

"""" Syntastic
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_tex_checkers = ['chktex']

"""" Molokai Theme
let g:molokai_original = 1

"""" Tagbar
let g:tagbar_sort = 0

""" Supertab
let g:SuperTabCrMapping = 0 "Needed to allow delimitMate_expand_cr
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-p>"

	" better key bindings for UltiSnipsExpandTrigger
	let g:UltiSnipsExpandTrigger = "<tab>"
	let g:UltiSnipsJumpForwardTrigger = "<tab>"
	let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"""" delimitMate
let delimitMate_jump_expansion = 0
let delimitMate_expand_cr = 2
let delimitMate_expand_space = 1

""" Clever F
let g:clever_f_smart_case = 1
let g:clever_f_mark_cursor = 1
let g:clever_f_mark_cursor_color = 'Error'

""" WhiteSpace
if $USERNAME == 'JoshWainwright'
	let g:noStripWhitespace = 1
endif

""" Startify
let g:startify_relative_path          = 1
let g:startify_change_to_dir          = 1

""" BufTabLine
let g:buftabline_show = 1
let g:buftabline_numbers = 1
let g:buftabline_indicators = 1

" }}}
" Functions                      {{{

" View the difference between the buffer and the file the last time it was saved
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis

function! RenameFile(...)
    let old_name = expand('%')
    if a:1 == ""
        let new_name = input('New file name: ', expand('%'), 'file')
    else
        let new_name = a:1
    endif
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
command! -nargs=? Rename :call RenameFile(<q-args>)

function! MyFoldText() "         {{{
	let line = getline(v:foldstart)

	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth - 3
	let foldedlinecount = v:foldend - v:foldstart

	" expand tabs into spaces
	let onetab = strpart('          ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')

	let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
	let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
	return line . repeat(" ",fillcharcount) . foldedlinecount . ' '
endfunction " }}}
" }}}
" Settings                       {{{

filetype plugin on
filetype indent on
syntax on
set ttyfast

" Code Formatting                {{{
set autoindent " copy indent from current when starting new line
set copyindent
set encoding=utf-8
set ffs=unix,dos,mac
set formatoptions=tcroqln
silent! set formatoptions+=j
set noeol
set noexpandtab
set preserveindent
set shiftwidth=4
set smartindent
set smarttab
set softtabstop=0
set tabstop=4
set wrap
set textwidth=79
set foldtext=MyFoldText()

" }}}
" Search                         {{{
set hlsearch
set ignorecase
set infercase
set incsearch
set magic
set matchtime=8
set showmatch
set smartcase
"}}}
" History, Backup and Undo Files {{{
set history=700
set backup
set writebackup
" set noswapfile
set undofile
set undodir  =$VIMHOME/tmp/undo//
set backupdir=$VIMHOME/tmp/backup//
set directory=$VIMHOME/tmp/directory//
" Make those folders if they don't already exist. " {{{
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif " }}}
set viminfo^=!
"}}}
" Editor Setup                   {{{
set autoread      " Auto read when a file changes from the outside
set autowrite     " Auto write before make etc.
set linebreak     " Don't break across words
set modeline      " Check for modelines to set files specific settings
set hidden        " Hide buffer when abandoning rather than unloading
set lazyredraw    " Don't redraw the screen for macros and registers
set nostartofline " Dont' move cursor to start of line for gg,G etc.
set matchpairs+=<:>
set listchars=tab:·\ ,trail:▸,nbsp:#,extends:»,precedes:«
"set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
augroup trailing " {{{
	au!
	au InsertEnter * :set listchars-=trail:▸
	au InsertLeave * :set listchars+=trail:▸
augroup END " }}}
set list
set fillchars=vert:│
set switchbuf=usetab " Method to use when switching buffers
set scrolloff=5      " Number of lines to keep above and below cursor
set synmaxcol=200   " Syntax highlight long lines
set virtualedit+=block
"}}}
" User Controls                  {{{
set whichwrap+=<,>,h,l         " Keys that wrap onto next line
set backspace=eol,start,indent " Allow backspacing over
"}}}
" UI                             {{{
colorscheme molokaiV

set wrapmargin=0 " Wrap text
set showtabline=1
set cursorline
set cmdheight=1
set cmdwinheight=3
if exists("&relativenumber")
	set relativenumber
endif
set number
set noerrorbells
set novisualbell
set t_vb=
set tm=500
set mouse=a
if has('win32') || has('win32unix')
	set guifont=Consolas:h11:cANSI
else
	set guifont=Droid\ Sans\ Mono\ 10
endif
if exists("&colorcolumn")
	set colorcolumn=+1
	hi! link ColorColumn CursorLine
else
	:mat ErrorMsg '\%81v.\+'
endif
set splitbelow
set splitright
"}}}
" Command Prompt and status line {{{
set showcmd          " Show last command in last line of scree
set ruler
set laststatus=2     " Show a statusline in all windows
set wildmode=full
set wildmenu
set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*.class        "Ignore VCS
if exists("&wildignorecase")
	set wildignorecase
endif

"}}}
" GUI                            {{{
if has("gui_running")
	" set guioptions+=P "allow visual selection to be accessed in system paste
	set guioptions+=c "use console dialogues
	set guioptions-=L "left hand toolbar isn't present
	set guioptions-=T "remove tool bar
	set guioptions-=m "remove menu bar
	set guioptions-=l "remove right scroll
	set guioptions-=r "remove left scroll
	set guioptions-=b "remove bottom scroll
endif

" automatically open quickfix window after commands that modify the quickfix list
" autocmd QuickFixCmdPost *grep* if len(getqflist()) | copen | endif

" go to last cursor position when opening files
augroup line_return
	au!
	autocmd BufReadPost * 
		\ if line("'\"") > 0 && line("'\"") <= line("$") | 
			\ exe "normal! g'\"" | 
		\ endif
augroup END

"}}}
" External Prgs                  {{{

if has('win32') && executable('zsh')
	set shell=C:/cygwin/bin/zsh.exe\ -i
	set shellcmdflag=-c
elseif has('win32')
	set shell=C:/cygwin/bin/bash
	set shellcmdflag=--login\ -c
	set shellxquote=\"
else
	set shell=sh
endif

let s:git=system("git rev-parse --git-dir > /dev/null")
if !v:shell_error
	set grepprg=git\ --no-pager\ grep\ -H\ -n\ --no-color
elseif s:has_ag
	set grepprg=ag\ --vimgrep\ --smart-case
elseif s:has_ack
	set grepprg=ack\ -H\ --nogroup\ --nocolor\ --smart-case
else
	set grepprg=grep\ --dereference-recursive\ --ignore-case\ --line-number\ --with-filename\ $*
endif

set path+=../**
set keywordprg=""
set makeprg=make
set complete=.,w,b,u,U,t,i,k
"}}}

" }}}
" FileTypes                      {{{

if has("autocmd") && exists("+omnifunc")
autocmd Filetype *
		\	if &omnifunc == "" |
		\		setlocal omnifunc=syntaxcomplete#Complete |
		\	endif
endif

if has('win32') || has('win32unix')
	let dictfile="C:/cygwin/usr/share/dict/words"
else
	let dictfile="/usr/share/dict/words"
endif
augroup ft
	autocmd!
	au FileType * exe 'setl dict+='.fnameescape($VIMRUNTIME).'/syntax/'.&filetype.'.vim'
	autocmd BufEnter,BufNew *.tex setl ft=tex | source ~/.vim/ftplugin/tex.vim
	autocmd BufEnter,BufNew *.rout,*.Rout setl ft=r
	autocmd BufEnter,BufNew *.md setl ft=markdown
	" Remove spaces at the end of header lines when starting new mail in mutt.
	autocmd BufReadPost /tmp/*/mutt* :1,/^$/s/\s\+$//
	autocmd BufNewFile,BufRead *.mail setl filetype=mail
	autocmd BufWritePre *.vim g:noStripWhitespace
	autocmd Filetype netrw setlocal bufhidden=wipe
augroup END

augroup vimp
	autocmd!
	autocmd BufEnter *info.gpg set ft=gpg
	autocmd FileType gpg set conceallevel=2
	autocmd FileType gpg :syntax region hideup Conceal start='|' end='$'
	autocmd FileType gpg set colorcolumn=0
augroup END

" }}}
" Keybindings                    {{{

nnoremap ; :
nnoremap , ;

map <F1> <Nop>

" Try using jk and kj as Escape in insert mode.
inoremap jk <Esc>
inoremap kj <Esc>

" Center search result
nnoremap n nzz
nnoremap N Nzz

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

nnoremap D dg_
nnoremap Y yg_

if executable('grep')
	map <C-g> :grep<space><space>.<left><left>
else
	map <C-g> :vimgrep<space><space>.<left><left>
endif

" Jump to start and end of line in insert mode
inoremap <C-a> <esc>I
inoremap <C-e> <esc>A
cnoremap <c-a> <home>
cnoremap <c-e> <end>

nnoremap Q :normal! n.<CR>

" Delete to black hole with X
noremap X "_d
noremap XX "_dd

" Re-indent whole file
nnoremap g+ :call Preserve("normal! gg=G")<CR>

" Insert current filename
inoremap <leader>fn <C-R>=expand("%:t")<CR>

" List all buffers and quickly switch to selected
nmap <leader>b :ls<CR>:buffer<Space>

map <leader>rc :e! $MYVIMRC<CR>
map <leader>rd :e! $VIMHOME/plugin/display.vim<CR>
augroup Reload_vimrc
	autocmd!
	autocmd BufWritePost $MYVIMRC source $MYVIMRC | echo "vimrc is sourced"
augroup END

" Replace selected text
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

" Split lines, oposite of join, J
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Don't change case when meaning to undo in visual mode
vnoremap u <nop>
vnoremap gu u

" Fast saving
nmap <leader>w :w!<cr>
cabbrev w!! w !sudo tee > /dev/null %
augroup Save
	autocmd!
	" au FocusLost * :silent! wall
	au VimResized * :wincmd =
augroup END

" Save the current file and run the make program
map <F9>   :make<Return>
map <S-F9> :silent make<Return>
map <F10>  :copen<Return>:cprevious<Return>
map <F11>  :copen<Return>:cnext<Return>

" Open the Tagbar sidebar
nnoremap <silent> <F8> :TagbarToggle<CR>

" Unset highlighting of a search
nmap <silent> <leader>q :nohlsearch<CR><Plug>(clever-f-reset)

" Switch to Next and Previous buffer
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Ranger
nnoremap <leader>r :silent !ranger %:h<cr>:redraw!<cr>
nnoremap <leader>R :silent !ranger<cr>:redraw!<cr>

" System clipboard copy and paste
nmap <leader>v "+gh
imap <leader>v <ESC>"+gpa
nmap <leader>ay ggVG"+y

" Jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

"           Scroll Wheel = Up/Down 4 lines
"   Shift + Scroll Wheel = Up/Down 1 page
" Control + Scroll Wheel = Up/Down 1/2 page
noremap  <ScrollWheelUp>    6<C-Y>
noremap  <ScrollWheelDown>  6<C-E>
noremap  <S-ScrollWheelUp>   <C-Y>
noremap  <S-ScrollWheelDown> <C-E>
noremap  <C-ScrollWheelUp>   <C-U>
noremap  <C-ScrollWheelDown> <C-D>
inoremap <ScrollWheelUp>     <C-O>4<C-Y>
inoremap <ScrollWheelDown>   <C-O>4<C-E>
inoremap <S-ScrollWheelUp>   <C-O><C-Y>
inoremap <S-ScrollWheelDown> <C-O><C-E>
inoremap <C-ScrollWheelUp>   <C-O><C-U>
inoremap <C-ScrollWheelDown> <C-O><C-D>
map      <MiddleMouse>       <LeftMouse>
imap     <MiddleMouse>       <LeftMouse>
map      <2-MiddleMouse>     <LeftMouse>
imap     <2-MiddleMouse>     <LeftMouse>
map      <3-MiddleMouse>     <LeftMouse>
imap     <3-MiddleMouse>     <LeftMouse>
map      <4-MiddleMouse>     <LeftMouse>
imap     <4-MiddleMouse>     <LeftMouse>

" Increase and decrease font size in gui using Alt-Up and Alt-Down
nnoremap <A-Up> :silent! let &guifont = substitute(
 \ &guifont,
 \ ':h\zs\d\+',
 \ '\=eval(submatch(0)+1)',
 \ '')<CR><CR>
nnoremap <A-Down> :silent! let &guifont = substitute(
 \ &guifont,
 \ ':h\zs\d\+',
 \ '\=eval(submatch(0)-1)',
 \ '')<CR><CR>

" }}}
" Abbreviations                  {{{

cabbrev help vert help

abbrev <expr> dts strftime("%d/%m/%Y")
abbrev <expr> dty strftime("%Y%m%d")
abbrev <expr> dtyd strftime("%Y-%m-%d")
abbrev <expr> dtl strftime("%c")

iabbrev <expr> Cre: "Created:  TIMESTAMP<CR>
                       \Modified: TIMESTAMP<CR>
                       \Author:   Josh Wainwright<CR>
                       \Filename: " . expand('%:t')
iabbrev TST TIMESTAMP

iabbrev <expr> Weeklyr "Weekly Report<CR>
                       \=============<CR>
                       \Josh Wainwright<CR>
                       \Week ending " . system("date -d Fri '+%d/%m/%Y'") . "<CR>
                       \- <CR>
                       \<CR>
                       \Customer Site Visits<CR>
                       \--------------------<CR>
                       \<CR>
                       \Vacation<CR>
                       \--------<CR>
                       \- None"

" }}}
" LDRA                           {{{

augroup ldra
	autocmd!
	autocmd BufEnter,BufNew *.tcf set ft=conf
	autocmd BufEnter,BufNew *.tct set ft=conf
	autocmd BufEnter,BufNew */WeeklyReports/201* setl ft=markdown
augroup END

command! TBini :e C:\ProgramData\LDRA\TESTBED.ini

nnoremap <F12> :EditReport<cr>
nnoremap <S-F12> :EditReport!<cr>
command! -nargs=* -bang EditReport :call EditReport('<bang>' == '!', <f-args>)
function! EditReport(monthly, ...)
	let prefix = ''

	" a:0 (number of args) is >0 if a specific date is given
	if a:0 > 0
		let date = a:1
		if a:monthly
			let prefix = 'MonthlyJAW'
		endif
	" Otherwise get the relevant current date
	else
		if a:monthly
			let date = system("echo -n `date '+%Y%m'`")
			let prefix = 'MonthlyJAW'
		else
			let date = system("echo -n `date -d Fri '+%Y%m%d'`")
		endif
	endif
	let thisweek = '$HOME/Documents/Forms/WeeklyReports/'.date.prefix
	if filereadable(expand(thisweek).'.md')
		exec "edit ".thisweek.".md"
	elseif filereadable(expand(thisweek).'.txt')
		exec "edit ".thisweek.".txt"
	else
		exec "edit ".thisweek . ".md | normal iWeeklyro"
	endif
endfunction

" }}}
" Temp                           {{{
" if has('win32') && has('gui_running')
" 	augroup win
" 		au!
" 		au GUIEnter * simalt ~x
" 	augroup END
" endif

" }}}
" vim: fdm=marker
